<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_1790002_event_ma.EventUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>EventUtils</name>
        <script><![CDATA[var EventUtils = Class.create();
EventUtils.prototype = {
    initialize: function() {},

    fetchAllEvents: function() {
        var res = [];
        var gr = new GlideRecord('x_1790002_event_ma_event_record'); // Use your actual table name
        gr.query();
        while (gr.next()) {
            res.push({
                number: gr.getValue('number'),
                event_name: gr.getValue('event_name'),
                event_date: gr.getValue('event_date'),
                x_location: gr.getValue('x_location'),
                summary: gr.getValue('summary')
            });
        }
        return JSON.stringify(res);
    },


    fetchEventDetails: function(eventid) {
        var res = [];
        var event = new GlideRecord('x_1790002_event_ma_event_record');
        event.addQuery('number', eventid);
        event.query();
        while (event.next()) {
            res.push({
                eventid: event.getDisplayName('number'),
                EventName: event.getValue('event_name'),
                EventDate: event.getValue('event_date'),
                Location: event.getValue('x_location')

            });
        }
        return JSON.stringify(res);
    },

    isVIP: function(eventId) {
        var eventGR = new GlideRecord('x_1790002_event_ma_event_record');
        if (eventGR.get(eventId)) {
            return eventGR.vip == true;
        }
        return false;
    },

    getRemainingBudget: function(eventId) {
        var budgetGR = new GlideRecord('x_1790002_event_ma_budget');
        if (budgetGR.get('event_id.number', eventId)) {
            return budgetGR.amount_remaining;
        }
        return 0;
    },

    fetchEventTasks: function(eventId) {
        var taskGR = new GlideRecord('x_1790002_event_ma_event_task');
        var tasks = [];
        taskGR.addQuery('event_id.number', eventId);
        taskGR.query();
        while (taskGR.next()) {
            tasks.push({
                sys_id: taskGR.sys_id.toString(),
                short_description: taskGR.short_description.toString(),
                state: taskGR.state.toString()
            });
        }
        return tasks;
    },

    fetchEventAttendees: function(eventId) {
        var attendeeGR = new GlideRecord('x_1790002_event_ma_attendee');
        var attendees = [];
        attendeeGR.addQuery('event_id.number', eventId);
        attendeeGR.query();
        while (attendeeGR.next()) {
            attendees.push({
                sys_id: attendeeGR.sys_id.toString(),
                first_name: attendeeGR.first_name.toString(),
                last_name: attendeeGR.last_name.toString(),
                email: attendeeGR.email.toString()
            });
        }
        return attendees;
    },

    fetchEventVendors: function(eventId) {
        var vendorGR = new GlideRecord('x_1790002_event_ma_vendor');
        var vendors = [];
        vendorGR.addQuery('event_id.number', eventId);
        vendorGR.query();
        while (vendorGR.next()) {
            vendors.push({
                sys_id: vendorGR.sys_id.toString(),
                name: vendorGR.vendor_name.toString(),
                contact: vendorGR.contact_person.toString()
            });
        }
        return vendors;
    },

    fetchEventBudgetDetails: function(eventId) {
        var budgetGR = new GlideRecord('x_1790002_event_ma_budget');
        if (budgetGR.get('event_id.number', eventId)) {
            return {
                sys_id: budgetGR.sys_id.toString(),
                budget_amount: budgetGR.total_budget.toString(),
                amount_spent: budgetGR.amount_spent.toString(),
                remaining_amount: budgetGR.amount_remaining
            };
        }
        return null;
    },

    fetchEventFeedback: function(eventId) {
        var feedbackGR = new GlideRecord('x_1790002_event_ma_feedback');
        var feedbacks = [];
        feedbackGR.addQuery('event_id.number', eventId);
        feedbackGR.query();
        while (feedbackGR.next()) {
            feedbacks.push({
                sys_id: feedbackGR.sys_id.toString(),
                attendee: feedbackGR.attendee_id.toString(),
                rating: feedbackGR.rating.toString()
            });
        }
        return feedbacks;
    },

    type: 'EventUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-08-05 11:12:44</sys_created_on>
        <sys_id>85830f6bc3c7221010cc9702b401310d</sys_id>
        <sys_mod_count>22</sys_mod_count>
        <sys_name>EventUtils</sys_name>
        <sys_package display_value="Event Management And Planning" source="x_1790002_event_ma">f44db09bc303221010cc9702b4013155</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Event Management And Planning">f44db09bc303221010cc9702b4013155</sys_scope>
        <sys_update_name>sys_script_include_85830f6bc3c7221010cc9702b401310d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-08-05 13:50:13</sys_updated_on>
    </sys_script_include>
</record_update>
